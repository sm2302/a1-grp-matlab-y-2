% counting alive neighbouring cells by generating offset matrices
function [newBoard] = solutions_next_iteration(Board, offset_to_left, offset_to_right, ...
                                                offset_to_up, offset_to_bottom)

  % board is shift to the left, right, top, bottom, top left, top right, bottom left, bottom right
  % sum up shifting to calculate the total amount of alive neighbouring cells
  neighbourCellsCounts = Board(:, offset_to_left) + Board(:, offset_to_right) + ...
                          Board(offset_to_up, :) + Board(offset_to_bottom, :) + ...
                          Board(offset_to_up, offset_to_left) + Board(offset_to_up, offset_to_right) + ...
                          Board(offset_to_bottom, offset_to_left) + Board(offset_to_bottom, offset_to_right);

  % make sure the borders are all zero
  neighbourCellsCounts(:, 1) = 0;
  neighbourCellsCounts(:, size(neighbourCellsCounts, 2)) = 0;
  neighbourCellsCounts(1, :) = 0;
  neighbourCellsCounts(size(neighbourCellsCounts, 1), :) = 0;

  % new board is generated by obeying the set of rules of Conway's game of life
  % rule 2 - any live cell with two or three live neighbours lives on to the next generation
  % rule 4 - any dead cell with exactly three live neighbours becomes a live cell (reproduction)
  % rule 1 & 3 - are just negations of rule 2 & 4
  newBoard = (Board & (neighbourCellsCounts == 2)) | (neighbourCellsCounts == 3);

end
